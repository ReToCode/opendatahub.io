{"version":3,"file":"component---src-pages-docs-future-tsx-1be3357830a51f505965.js","mappings":"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","sources":["webpack://opendatahub.io/./node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js","webpack://opendatahub.io/./node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js","webpack://opendatahub.io/./node_modules/@patternfly/react-core/dist/esm/components/Card/CardActions.js","webpack://opendatahub.io/./src/pages/docs/future.tsx","webpack://opendatahub.io/./node_modules/@patternfly/react-styles/css/components/Panel/panel.mjs"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Panel/panel';\nimport { css } from '@patternfly/react-styles';\nconst PanelBase = (_a) => {\n    var { className, children, variant, isScrollable, innerRef } = _a, props = __rest(_a, [\"className\", \"children\", \"variant\", \"isScrollable\", \"innerRef\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.panel, variant === 'raised' && styles.modifiers.raised, variant === 'bordered' && styles.modifiers.bordered, isScrollable && styles.modifiers.scrollable, className), ref: innerRef }, props), children));\n};\nexport const Panel = React.forwardRef((props, ref) => (React.createElement(PanelBase, Object.assign({ innerRef: ref }, props))));\nPanel.displayName = 'Panel';\n//# sourceMappingURL=Panel.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport const CardHeader = (_a) => {\n    var { children = null, className = '', id, onExpand, toggleButtonProps, isToggleRightAligned } = _a, props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\", \"isToggleRightAligned\"]);\n    return (React.createElement(CardContext.Consumer, null, ({ cardId }) => {\n        const cardHeaderToggle = (React.createElement(\"div\", { className: css(styles.cardHeaderToggle) },\n            React.createElement(Button, Object.assign({ variant: \"plain\", type: \"button\", onClick: evt => {\n                    onExpand(evt, cardId);\n                } }, toggleButtonProps),\n                React.createElement(\"span\", { className: css(styles.cardHeaderToggleIcon) },\n                    React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" })))));\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className), id: id }, props),\n            onExpand && !isToggleRightAligned && cardHeaderToggle,\n            children,\n            onExpand && isToggleRightAligned && cardHeaderToggle));\n    }));\n};\nCardHeader.displayName = 'CardHeader';\n//# sourceMappingURL=CardHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nexport const CardActions = (_a) => {\n    var { children = null, className = '', hasNoOffset = false } = _a, props = __rest(_a, [\"children\", \"className\", \"hasNoOffset\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.cardActions, hasNoOffset && styles.modifiers.noOffset, className) }, props), children));\n};\nCardActions.displayName = 'CardActions';\n//# sourceMappingURL=CardActions.js.map","import React from \"react\"\nimport { DOCS_NAVIGATION, ROADMAP_DATA } from \"../../const\"\nimport { Button, Card, CardActions, CardBody, CardHeader, CardProps, CardTitle, PageSection, Panel, Split, SplitItem, Title } from \"@patternfly/react-core\";\nimport { PageProps } from \"gatsby\";\nimport { Layout, SideNavigation } from \"../../components/shared\";\n\nconst ProjectCard = ({ title, description, url, moved, ...props }: { title: string, description?: string, url?: string, moved?: string | number } & CardProps) => (\n    <Card isCompact {...props}>\n        <CardHeader>\n            {url && (\n                <CardActions>\n                    <Button variant=\"tertiary\" isSmall component=\"a\" href={url}>Github Issues</Button>\n                </CardActions>\n            )}\n            <CardTitle style={{ color: moved ? \"grey\" : undefined }}>{title} {moved ? <Button isInline variant=\"link\" component=\"a\" href={`#${moved.toString().replace(\"+\", \"\")}`}>{`(Moved to ${moved})`}</Button> : undefined}</CardTitle>\n        </CardHeader>\n        {description && <CardBody style={{ color: moved ? \"grey\" : undefined }}>{description}</CardBody>}\n    </Card>\n)\n\n\nconst FutureIndex = ({ location }: PageProps) => {\n\n\n    return (\n        <Layout\n            sidebar={\n                <SideNavigation\n                    config={DOCS_NAVIGATION}\n                    location={location}\n                    toc={{}}\n                />\n            }\n        >\n            <PageSection\n                isCenterAligned\n                isWidthLimited\n                padding={{ default: \"padding\" }}\n            >\n                <div\n                    className=\"asciidoc-docs\"\n                >\n                    <Title size=\"4xl\" headingLevel=\"h1\">Roadmap</Title>\n                    {ROADMAP_DATA.future.map((release) => (\n                        <Panel className=\"rounded pf-u-p-md pf-u-mt-lg\" style={{ backgroundColor: \"#f1f1f1\", width: \"100%\" }} key={release.title}>\n                            <Title className=\"pf-u-mb-lg\" headingLevel=\"h1\">{release.title}</Title>\n                            {release.children.map((project) => (\n                                <ProjectCard className=\"rounded pf-u-mb-sm\" key={project.title} title={project.title} />\n                            ))}\n                        </ Panel>\n                    ))}\n                    <Title size=\"3xl\" headingLevel=\"h2\" className=\"pf-u-mt-2xl\">Past releases</Title>\n                    <span>Visit the </span>\n                    <Button\n                        component=\"a\"\n                        href=\"/docs/release-notes\"\n                        variant=\"link\"\n                        isInline\n                    >\n                        release notes\n                    </Button>\n                    <span> section for detailed information about the releases.</span>\n                    {ROADMAP_DATA.past.map((release) => (\n                        <Panel id={release.version.toString()} className=\"rounded pf-u-p-md pf-u-mt-lg\" style={{ backgroundColor: \"#f1f1f1\", width: \"100%\" }} key={release.title}>\n                            <Split>\n                                <SplitItem>\n                                    <Title headingLevel=\"h2\" size=\"3xl\" className=\"pf-u-mb-lg\">Release {release.title}</Title>\n                                </SplitItem>\n                                <SplitItem isFilled />\n                                {release.url && (\n                                    <SplitItem>\n                                        <Button variant=\"tertiary\" component=\"a\" href={release.url}>GitHub Project</Button>\n                                    </SplitItem>\n                                )}\n                            </Split>\n                            {release.children.map((project) => (\n                                <ProjectCard className=\"rounded pf-u-mb-sm\" key={project.title} title={project.title} description={project.description} url={project.url} moved={project?.moved} />\n                            ))}\n                        </ Panel>\n                    ))}\n                </div>\n            </PageSection>\n        </Layout>\n    )\n}\n\nexport default FutureIndex\n","import './panel.css';\nexport default {\n  \"modifiers\": {\n    \"bordered\": \"pf-m-bordered\",\n    \"raised\": \"pf-m-raised\",\n    \"scrollable\": \"pf-m-scrollable\"\n  },\n  \"panel\": \"pf-c-panel\",\n  \"panelFooter\": \"pf-c-panel__footer\",\n  \"panelHeader\": \"pf-c-panel__header\",\n  \"panelMain\": \"pf-c-panel__main\",\n  \"panelMainBody\": \"pf-c-panel__main-body\"\n};"],"names":["PanelBase","_a","className","children","variant","isScrollable","innerRef","props","Object","assign","ref","Panel","displayName","CardHeader","id","onExpand","toggleButtonProps","isToggleRightAligned","Card","cardId","cardHeaderToggle","Button","type","onClick","evt","CardActions","hasNoOffset","ProjectCard","_ref","title","description","url","moved","React","isCompact","isSmall","component","href","CardTitle","style","color","undefined","isInline","toString","replace","CardBody","_ref2","location","Layout","sidebar","SideNavigation","config","DOCS_NAVIGATION","toc","PageSection","isCenterAligned","isWidthLimited","padding","default","Title","size","headingLevel","ROADMAP_DATA","release","backgroundColor","width","key","map","project","version","Split","SplitItem","isFilled"],"sourceRoot":""}